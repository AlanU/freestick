name: qt-build
 
on: push # when to trigger this. Here, on every push
jobs:
  build_and_test:
    name: "Build and test"
    strategy:
      matrix:
        os: [windows-latest,macos-12] # we build on GitHub-provided Windows and Linux images
    runs-on: ${{ matrix.os }} # use value from the matrix
    env:
         Qt_Build_Version: '6.7.3'
    steps:
     - name: "Checking for Mac"
       if: matrix.os == 'macos-12'
       run: echo 'Target Mac' && echo "Build_Target=mac" >> $GITHUB_ENV && echo "Build_Arch=clang_64" >> $GITHUB_ENV && echo "Build_Compiler_Dir=macos" >> $GITHUB_ENV && echo "Artifact_Name=macOSX" >> $GITHUB_ENV
     - name: "Checking for Windows" 
       if: matrix.os == 'windows-latest'
       run: echo 'Target Windows' && echo "Build_Target=windows" | Out-File -FilePath $env:GITHUB_ENV -Append; echo "Build_Arch=win64_msvc2019_64" | Out-File -FilePath $env:GITHUB_ENV -Append; echo "Build_Compiler_Dir=msvc2019_64" | Out-File -FilePath $env:GITHUB_ENV -Append; echo "Artifact_Name=windows64" | Out-File -FilePath $env:GITHUB_ENV -Append     
     - name: 'Add msbuild to PATH on Windows'
       if: matrix.os == 'windows-latest'
       uses: microsoft/setup-msbuild@v2
     - name: Install Qt
       uses: jurplel/install-qt-action@v3
       with:
         version: ${{env.Qt_Build_Version}}
         arch: ${{env.Build_Arch}}
         cache: false
         setup-python: false
     - uses: actions/checkout@v4    # Actually check out the sources. GH Actions can run for events that may not require
     - uses: ruby/setup-ruby@v1
       with:
         ruby-version: '3.0.0'
         bundler-cache: true

     - name: Setup Ruby Gems
       run: cd '${{github.workspace}}/build/QT/CommandLine' && bundle install 
       # We don't need to set up the environment variable for CMake to see Qt because the install-qt-action
       # sets up the necessary variables automatically

     - name: Check Qt install
       run: ls ${{runner.workspace}}/Qt/${{env.Qt_Build_Version}}/${{env.Build_Compiler_Dir}}
     - name: Build FreeStick Lib
       run: cd '${{ github.workspace}}/build/QT/CommandLine' && ruby build.rb --qt=${{runner.workspace}}/Qt/${{env.Qt_Build_Version}} --target=${{env.Build_Target}} --useFullPath=false
     - name: Archive Lib Build Results
         uses: actions/upload-artifact@v4
         with:
            name: ${{env.Artifact_Name}} Lib
            path: ${{ github.workspace}}/build/QT/CommandLine/out/${{env.Artifact_Name}}.zip
